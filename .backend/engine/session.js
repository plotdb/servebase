// Generated by LiveScript 1.6.0
(function(){
  var lderror, session, ref$;
  lderror = require('lderror');
  session = function(opt){
    opt == null && (opt = {});
    this.db = opt.db;
    this.log = opt.logServer;
    this.mdw = null;
    return this;
  };
  session.prototype = (ref$ = Object.create(Object.prototype), ref$.middleware = function(it){
    if (arguments.length) {
      return this.mdw = it;
    } else {
      return this.mdw;
    }
  }, ref$['delete'] = function(arg$){
    var user;
    user = arg$.user;
    return this.db.query("delete from session where owner = $1", [user]);
  }, ref$.sync = function(arg$){
    var req, user, obj, this$ = this;
    req = arg$.req, user = arg$.user, obj = arg$.obj;
    return Promise.resolve().then(function(){
      if (obj) {
        return Promise.resolve(obj);
      }
      return this$.db.query("select * from users where key = $1 and deleted is not true", [user]).then(function(r){
        r == null && (r = {});
        return (r.rows || (r.rows = []))[0];
      });
    }).then(function(obj){
      if (!obj) {
        return;
      }
      if (req && req.user && req.user.key === user) {
        import$(req.user, obj);
      }
      return this$.db.query("update session set detail = jsonb_set(detail, '{passport,user}', ($1)::jsonb)\nwhere owner = $2", [JSON.stringify(obj), user]);
    });
  }, ref$.login = function(arg$){
    var user, req;
    user = arg$.user, req = arg$.req;
    return this.db.query("select * from users where key = $1 and deleted is not true", [user]).then(function(r){
      var u;
      r == null && (r = {});
      if (!(u = (r.rows || (r.rows = []))[0])) {
        return lderror.reject(404);
      }
      return new Promise(function(res, rej){
        return req.login(u, function(e){
          if (e) {
            return rej(e);
          } else {
            return res();
          }
        });
      });
    });
  }, ref$);
  module.exports = session;
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
