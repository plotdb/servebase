// Generated by LiveScript 1.6.0
(function(){
  var lderror, suuid, aux;
  lderror = require('lderror');
  suuid = require('@plotdb/suuid');
  aux = require('./aux');
  (function(it){
    return module.exports = it;
  })(function(backend){
    var route490, handler;
    route490 = function(req, res, err){
      if (!/^\/api/.exec(req.originalUrl) && !/^\/err\/490/.exec(req.originalUrl)) {
        res.set({
          "Content-Type": "text/html",
          "X-Accel-Redirect": err.redirect || '/err/490',
          "X-Accel-Buffering": "no",
          "Cache-Control": "no-cache, no-store, must-revalidate",
          "Pragma": "no-cache",
          "Expires": 0
        });
      } else {
        delete err.redirect;
      }
      res.cookie('lderror', JSON.stringify(err), {
        maxAge: 60000,
        httpOnly: false,
        secure: true,
        sameSite: 'Strict'
      });
      return res.status(490).send(err);
    };
    handler = function(err, req, res, next){
      var _detail, _e, e;
      try {
        if (!err) {
          return next();
        }
        _detail = {
          user: (req.user || {}).key || 0,
          ip: aux.ip(req),
          url: req.originalUrl
        };
        if (err.status === 400) {
          err = lderror(400);
        }
        if (err.code === 'SESSIONCORRUPTED') {
          aux.clearCookie(req, res);
          err = lderror(1029);
        }
        if (err.code === 'EBADCSRFTOKEN') {
          err = lderror(1005);
        }
        if (err.id === 1029) {
          backend.logError.warn("1029 SESSIONCORRUPTED " + JSON.stringify(_detail));
          try {
            aux.clearCookie(req, res);
            req.logout();
          } catch (e$) {
            _e = e$;
          }
        }
        err.uuid = suuid();
        err._detail = _detail;
        if (backend.config.log.allError && !(lderror.id(err) && err.log)) {
          backend.logError.debug({
            err: err
          }, "error logged in error handler (lderror id " + lderror.id(err) + ")");
        }
        if (lderror.id(err)) {
          if (err.log) {
            req.log.error({
              err: err
            }, ("exception logged [URL: " + req.originalUrl + "] " + (err.message ? ': ' + err.message : '') + " " + err.uuid).red);
          }
          delete err.stack;
          return route490(req, res, err);
        } else if (err instanceof URIError && (err.stack + "").startsWith('URIError: Failed to decode param')) {
          return res.status(400).send(err);
        }
      } catch (e$) {
        e = e$;
        req.log.error({
          err: e
        }, "exception occurred while handling other exceptions".red);
        req.log.error("original exception follows:".red);
      }
      req.log.error({
        err: err
      }, ("unhandled exception occurred [URL: " + req.originalUrl + "] " + (err.message ? ': ' + err.message : '') + " " + err.uuid).red);
      err = {
        id: err.id,
        name: err.name,
        uuid: err.uuid,
        payload: err.payload
      };
      if (!(err.name != null && err.id != null)) {
        err.name = 'lderror';
        err.id = 500;
      }
      return route490(req, res, err);
    };
    return handler;
  });
}).call(this);
