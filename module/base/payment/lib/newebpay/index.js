// Generated by LiveScript 1.6.0
(function(){
  var crypto, suuid, prepare;
  crypto = require('crypto');
  suuid = require('@plotdb/suuid');
  prepare = function(arg$){
    var cfg, info, TradeInfo, code, k, v, cipher, recode, hash, TradeSha;
    cfg = arg$.cfg, info = arg$.info;
    TradeInfo = {
      MerchantID: cfg.MerchantID,
      RespondType: 'JSON',
      TimeStamp: Date.now(),
      Version: '2.0',
      LangType: info.lng || 'zh-tw',
      MerchantOrderNo: suuid().replace(/\./g, '0'),
      Amt: info.amount,
      ItemDesc: info.desc,
      ReturnURL: cfg.ReturnURL,
      NotifyURL: cfg.NotifyURL,
      Email: cfg.Email,
      LoginType: 0
    };
    code = [];
    for (k in TradeInfo) {
      v = TradeInfo[k];
      code.push(k + "=" + encodeURIComponent(v));
    }
    code = code.join('&');
    cipher = crypto.createCipheriv('aes-256-cbc', cfg.hashkey, cfg.hashiv);
    cipher.setAutoPadding(true);
    code = cipher.update(code, 'utf-8', 'hex') + cipher.final('hex');
    recode = "HashKey=" + cfg.hashkey + "&" + code + "&HashIV=" + cfg.hashiv;
    hash = crypto.createHash('sha256');
    TradeSha = hash.update(recode).digest('hex').toUpperCase();
    return {
      MerchantID: cfg.MerchantID,
      TradeInfo: code,
      TradeSha: TradeSha,
      Version: '2.0'
    };
  };
  module.exports = {
    sign: function(arg$){
      var cfg, info;
      cfg = arg$.cfg, info = arg$.info;
      return {
        data: prepare({
          cfg: cfg,
          info: info
        })
      };
    }
  };
}).call(this);
