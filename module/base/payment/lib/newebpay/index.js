// Generated by LiveScript 1.6.0
(function(){
  var crypto, suuid, lderror, prepare;
  crypto = require('crypto');
  suuid = require('@plotdb/suuid');
  lderror = require('lderror');
  prepare = function(arg$){
    var cfg, payload, amt, TradeInfo, code, k, v, cipher, recode, hash, TradeSha;
    cfg = arg$.cfg, payload = arg$.payload;
    amt = typeof payload.amount !== 'string'
      ? payload.amount
      : parseFloat(payload.amount);
    if (isNaN(amt) || amt !== Math.floor(amt)) {
      throw lderror(1020);
    }
    TradeInfo = {
      MerchantID: cfg.MerchantID,
      RespondType: 'JSON',
      TimeStamp: Date.now(),
      Version: '2.0',
      LangType: payload.lng || 'zh-tw',
      MerchantOrderNo: suuid().replace(/\./g, '0'),
      Amt: Math.floor(amt).toFixed(0),
      ItemDesc: payload.desc || 'no description',
      ReturnURL: cfg.ReturnURL,
      NotifyURL: cfg.NotifyURL,
      Email: payload.email || '',
      LoginType: 0
    };
    code = [];
    for (k in TradeInfo) {
      v = TradeInfo[k];
      code.push(k + "=" + encodeURIComponent(v));
    }
    code = code.join('&');
    cipher = crypto.createCipheriv('aes-256-cbc', cfg.hashkey, cfg.hashiv);
    cipher.setAutoPadding(true);
    code = cipher.update(code, 'utf-8', 'hex') + cipher.final('hex');
    recode = "HashKey=" + cfg.hashkey + "&" + code + "&HashIV=" + cfg.hashiv;
    hash = crypto.createHash('sha256');
    TradeSha = hash.update(recode).digest('hex').toUpperCase();
    return {
      MerchantID: cfg.MerchantID,
      TradeInfo: code,
      TradeSha: TradeSha,
      Version: '2.0'
    };
  };
  module.exports = {
    sign: function(arg$){
      var cfg, payload;
      cfg = arg$.cfg, payload = arg$.payload;
      return {
        payload: prepare({
          cfg: cfg,
          payload: payload
        })
      };
    },
    notified: function(arg$){
      var cfg, body, code, decipher, obj;
      cfg = arg$.cfg, body = arg$.body;
      code = body.TradeInfo;
      decipher = crypto.createDecipheriv('aes-256-cbc', cfg.hashkey, cfg.hashiv);
      decipher.setAutoPadding(false);
      code = decipher.update(code, 'hex', 'utf-8') + decipher.final('utf-8');
      code = code.substring(0, code.length - code.charCodeAt(code.length - 1));
      obj = JSON.parse(code);
      return {
        slug: (obj.Result || (obj.Result = {})).TradeNo,
        payload: obj
      };
    },
    endpoint: function(arg$){
      var cfg;
      cfg = arg$.cfg;
      return cfg.testing
        ? {
          url: 'https://ccore.newebpay.com/MPG/mpg_gateway',
          method: 'POST'
        }
        : {
          url: 'https://core.newebpay.com/MPG/mpg_gateway',
          method: 'POST'
        };
    }
  };
}).call(this);
