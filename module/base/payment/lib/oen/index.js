// Generated by LiveScript 1.6.0
(function(){
  var crypto, suuid, lderror, nodeFetch, getUrl;
  crypto = require('crypto');
  suuid = require('@plotdb/suuid');
  lderror = require('lderror');
  nodeFetch = require('node-fetch');
  getUrl = function(arg$){
    var cfg;
    cfg = arg$.cfg;
    return cfg.testing
      ? {
        url: 'https://payment-api.testing.oen.tw',
        method: 'POST'
      }
      : {
        url: 'https://payment-api.oen.tw',
        method: 'POST'
      };
  };
  module.exports = {
    sign: function(arg$){
      var cfg, payload, amount, obj, ref$, url, method, opt;
      cfg = arg$.cfg, payload = arg$.payload;
      amount = typeof payload.amount !== 'string'
        ? payload.amount
        : parseFloat(payload.amount);
      if (isNaN(amount) || amount !== Math.floor(amount)) {
        throw lderror(1020);
      }
      if (!(cfg.merchantId && cfg.token && cfg.successUrl)) {
        throw lderror(400);
      }
      obj = {
        merchantId: cfg.merchantId,
        amount: amount,
        platformFee: 0,
        currency: 'TWD',
        orderId: payload.key + "",
        successUrl: cfg.successUrl,
        failureUrl: cfg.failureUrl || cfg.successUrl,
        productDetails: [{
          description: payload.desc,
          quantity: 1,
          unit: 'å€‹/piece',
          unitPrice: amount
        }],
        userEmail: payload.email
      };
      ref$ = {
        cfg: getUrl.cfg
      }, url = ref$.url, method = ref$.method;
      opt = {
        method: method,
        body: JSON.stringify(p.json),
        headers: {
          "Content-Type": "application/json; charset=UTF-8",
          "Authorization": "Bearer " + cfg.token
        }
      };
      return nodeFetch(url, opt).then(function(it){
        return it.json();
      }).then(function(ret){
        if (ret.code !== 'S0000') {
          return lderror.reject(400);
        }
        return {
          payload: ret
        };
      });
    },
    endpoint: function(arg$){
      var cfg, payload, base, id;
      cfg = arg$.cfg, payload = arg$.payload;
      base = cfg.testing ? ".testing.oen.tw" : ".oen.tw";
      id = (payload.data || {}).id || '';
      return {
        url: "https://" + cfg.merchantId + base + "/checkout/" + id,
        method: 'GET'
      };
    }
  };
}).call(this);
